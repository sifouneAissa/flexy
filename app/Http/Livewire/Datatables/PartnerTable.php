<?php

namespace App\Http\Livewire\Datatables;

use App\Models\Level;
use App\Models\MemberShip;
use App\Models\Provider;
use App\Models\User;
use Mediconesystems\LivewireDatatables\Action;
use Mediconesystems\LivewireDatatables\Column;
use Mediconesystems\LivewireDatatables\Http\Livewire\LivewireDatatable;
use Mediconesystems\LivewireDatatables\NumberColumn;

class PartnerTable extends LivewireDatatable
{

    public $hideable = 'inline';
    public $exportable = false;
    public $add = false;
    public $providers;

    public $memberships;
    public $levels;


    public function builder()
    {
        $auth = auth()->user();

        // children of the authenticated user
        $ids = $auth->children()->get("id")->pluck('id')->toArray();
        // for admin
        if($auth->hasRole('admin')) {
            $a_ids = User::whereNot('id',$auth->id)->whereNull('referred_by')->pluck('id')->toArray();
            $ids = array_merge($a_ids,$ids);
        }

        return User::query()->whereIn('users.id',$ids)
            ->leftJoin('levels', 'levels.id', 'users.level_id')
            ->leftJoin('member_ships', 'member_ships.id', 'users.member_ship_id')
            ->select('levels.name as level_name','member_ships.name as membership_name')
            ->groupBy('users.id');
    }

    public function mount($model = false, $include = [], $exclude = [], $hide = [], $dates = [], $times = [], $searchable = [], $sort = null, $hideHeader = null, $hidePagination = null, $perPage = null, $exportable = false, $hideable = false, $beforeTableSlot = false, $buttonsSlot = false, $afterTableSlot = false, $params = [])
    {
        $this->providers = Provider::where('is_service_provider',false)->get();

        $auth = auth()->user();
        // if admin get all
        if($auth->hasRole('admin')) {
            $this->levels = Level::orderBy('order')->get();
            $this->memberships = Membership::orderBy('order')->get();
        }
        // if not filter
        else {
            if(!($auth->level && $auth->membership))
                return abort(404);

            $this->levels = $auth->membership->levels()->whereNot('level_id',$auth->level_id)->orderBy('order','desc')->get();
            $this->memberships = $auth->level->memberships()->whereNot('member_ship_id',$auth->member_ship_id)->orderBy('order','desc')->get();

            // sort by order
            $this->levels = $this->levels->filter(function ($item) use ($auth){
                return $auth->level->order < $item->order;
            });

            $this->memberships = $this->memberships->filter(function ($item) use ($auth){
                return    $auth->membership->order < $item->order;
            });


        }

        parent::mount($model, $include, $exclude, $hide, $dates, $times, $searchable, $sort, $hideHeader, $hidePagination, $perPage, $exportable, $hideable, $beforeTableSlot, $buttonsSlot, $afterTableSlot, $params); // TODO: Change the autogenerated stub
    }

    public function columns()
    {

        $columns =  [

            Column::checkbox(),
            NumberColumn::name('id')
                ->label('ID')->filterable(),
            Column::name('name')->link('/partners/edit/{{id}}', '{{name}}')
                ->searchable(),
            Column::name('email')
                ->searchable(),
            Column::callback(['id','name'], function ($id,$name) {
                return User::find($id)->membership?->name;
            })->label('MemberShip')->filterable($this->memberships->pluck('name')->toArray())->filterOn('member_ships.name')->unsortable(),
            Column::callback(['level_id'], function ($level_id) {
                return Level::find($level_id)?->name;
            })->label('Level')->filterable($this->levels->pluck('name')->toArray())->filterOn('levels.name')
        ];

        foreach($this->providers as $provider){
            $column = Column::callback('id', function ($id) use ($provider) {
                return User::find($id)->cPer($provider->id)?->percentage;
            })->label('Percentage '.$provider->name)->unsortable();
            $column->name = $column->name.''. $provider->id;
            $columns[] = $column;
        }


        return $columns;
    }


    public function buildActions()
    {
        return [

            Action::value('level')->label('Edit level')->callback(function ($mode, $items) {
                // $items contains an array with the primary keys of the selected items
                $this->emitTo('pages.partners-page','setModal',[
                    'id' => 'levels-edit',
                    'items' => $items
                ]);
            }),
            Action::value('membership')->label('Edit membership')->callback(function ($mode, $items) {
                // $items contains an array with the primary keys of the selected items
                $this->emitTo('pages.partners-page','setModal',[
                    'id' => 'memberships-edit',
                    'items' => $items
                ]);
            }),
        ];
    }
}
