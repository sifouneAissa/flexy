<?php

namespace App\Http\Livewire\Datatables;

use App\Models\Provider;
use App\Models\User;
use Mediconesystems\LivewireDatatables\Column;
use Mediconesystems\LivewireDatatables\Http\Livewire\LivewireDatatable;
use Mediconesystems\LivewireDatatables\NumberColumn;

class PartnerTable extends LivewireDatatable
{

    public $hideable = 'inline';
    public $exportable = false;
    public $add = false;
    public $providers;

    public function builder()
    {
        $auth = auth()->user();

        // children of the authenticated user
        $ids = $auth->children()->get("id")->pluck('id')->toArray();
        // for admin
        if($auth->hasRole('admin')) {
            $a_ids = User::whereNot('id',$auth->id)->whereNull('referred_by')->pluck('id')->toArray();
            $ids = array_merge($a_ids,$ids);
        }

        return User::query()->whereIn('id',$ids);
    }

    public function mount($model = false, $include = [], $exclude = [], $hide = [], $dates = [], $times = [], $searchable = [], $sort = null, $hideHeader = null, $hidePagination = null, $perPage = null, $exportable = false, $hideable = false, $beforeTableSlot = false, $buttonsSlot = false, $afterTableSlot = false, $params = [])
    {
        $this->providers = Provider::all();
        parent::mount($model, $include, $exclude, $hide, $dates, $times, $searchable, $sort, $hideHeader, $hidePagination, $perPage, $exportable, $hideable, $beforeTableSlot, $buttonsSlot, $afterTableSlot, $params); // TODO: Change the autogenerated stub
    }

    public function columns()
    {

        $columns =  [

            Column::checkbox(),
            NumberColumn::name('id')
                ->label('ID')->filterable(),
            Column::name('name')
                ->searchable(),
            Column::name('email')
                ->searchable(),
            Column::callback(['id','name'], function ($id,$name) {
                return User::find($id)->membership?->name;
            })->label('MemberShip')->unsortable(),
            Column::callback(['id','name','email'], function ($id,$name,$email) {
                return User::find($id)->level?->name;
            })->label('Level')->unsortable()
        ];

        foreach($this->providers as $provider){
            $column = Column::callback('id', function ($id) use ($provider) {
                return User::find($id)->cPer($provider->id)?->percentage;
            })->label('Percentage '.$provider->name)->unsortable();
            $column->name = $column->name.''. $provider->id;
            $columns[] = $column;
        }


        return $columns;
    }

}
